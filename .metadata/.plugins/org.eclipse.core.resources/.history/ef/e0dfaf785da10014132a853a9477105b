package com.meatio.androidmetaio;

import android.app.Activity;
import android.content.res.AssetFileDescriptor;
import android.hardware.Sensor;
import android.hardware.SensorEvent;
import android.hardware.SensorEventListener;
import android.hardware.SensorManager;
import android.media.MediaPlayer;
import android.os.Bundle;
import android.widget.TextView;

import java.io.IOException;

public class MoveMvl extends Activity implements SensorEventListener{
	private SensorManager sensorManager;
    private MediaPlayer mp;
    private boolean reset;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.movemvl_layout);
        
        sensorManager = (SensorManager) getSystemService(SENSOR_SERVICE);
        mp = new MediaPlayer();

        reset = false;
    }

    @Override
    public void onSensorChanged(SensorEvent event) {
        if (event.sensor.getType() == Sensor.TYPE_ACCELEROMETER) {
            float xVal = event.values[0];
            float yVal = event.values[1];
            float zVal = event.values[2];

            if((xVal > -1.0 && xVal < 1.0) && (yVal > -1.0 && yVal < 1.0) && (zVal < -9.0 && zVal > -11.0)){
                if(reset){
                    reset = false;
                    mp.reset();
                    try {
                        AssetFileDescriptor afd;
                        afd = getAssets().openFd("01-cha-la-head-cha-la-tv-size RECORTADA.mp3");
                        mp.setDataSource(afd.getFileDescriptor(), afd.getStartOffset(), afd.getLength());
                        mp.prepare();
                        mp.start();

                    } catch (IllegalStateException e) {
                        e.printStackTrace();
                    } catch (IOException e) {
                        e.printStackTrace();
                    }
                } 
            }
            if((xVal > -1.0 && xVal < 1.0) && (yVal > -1.0 && yVal < 1.0) && (zVal < 9.0 && zVal > 11.0)) {
                reset = true;
            }
        }
    }

    @Override
    public void onAccuracyChanged(Sensor sensor, int accuracy) {

    }

    @Override
    protected void onResume() {
        super.onResume();
        sensorManager.registerListener(this,sensorManager.getDefaultSensor(Sensor.TYPE_ACCELEROMETER),SensorManager.SENSOR_DELAY_NORMAL);
    }

    @Override
    protected void onPause() {
        super.onPause();
        sensorManager.unregisterListener(this);
    }
}
